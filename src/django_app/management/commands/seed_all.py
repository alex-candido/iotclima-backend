# django_app/management/commands/seed_all.py

from django.core.management import CommandError, call_command
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = 'Runs all necessary seed commands in the correct order.'

    def add_arguments(self, parser):
        parser.add_argument(
            '--mode',
            type=str,
            default='development',
            help='Seeding mode: development or production (default: development)',
        )
        parser.add_argument(
            '--users_count',
            type=int,
            default=10,
            help='Number of fake users to create (only in development mode).',
        )
        parser.add_argument(
            '--places_per_city',
            type=int,
            default=1,
            help='Number of places to create per city in development mode.',
        )
        parser.add_argument(
            '--stations_per_place',
            type=int,
            default=1,
            help='Number of stations to create per place in development mode.',
        )

    def handle(self, *args, **options):
        mode = options['mode']
        users_count = options['users_count']
        places_per_city = options['places_per_city']
        stations_per_place = options['stations_per_place']

        self.stdout.write(self.style.SUCCESS(f"--- Starting All Seeds in '{mode}' Mode ---"))

        # 1. Seed Users
        self.stdout.write(self.style.HTTP_INFO("\n--- Running seed_users ---"))
        try:
            call_command('seed_users', mode=mode, users_count=users_count)
            self.stdout.write(self.style.SUCCESS("seed_users completed successfully."))
        except CommandError as e:
            self.stdout.write(self.style.ERROR(f"Error running seed_users: {e}"))
            raise CommandError("Aborting all seeds due to seed_users error.")

        # 2. Seed Places (assumes that CSV is already generated by notebook for development mode)
        self.stdout.write(self.style.HTTP_INFO("\n--- Running seed_places_from_csv ---"))
        try:
            call_command('seed_places_from_csv', mode=mode, places_per_city=places_per_city)
            self.stdout.write(self.style.SUCCESS("seed_places_from_csv completed successfully."))
        except CommandError as e:
            self.stdout.write(self.style.ERROR(f"Error running seed_places_from_csv: {e}"))
            raise CommandError("Aborting all seeds due to seed_places_from_csv error.")
        
        # 3. Seed Stations
        self.stdout.write(self.style.HTTP_INFO("\n--- Running seed_stations ---"))
        try:
            call_command('seed_stations', mode=mode, stations_per_place=stations_per_place)
            self.stdout.write(self.style.SUCCESS("seed_stations completed successfully."))
        except CommandError as e:
            self.stdout.write(self.style.ERROR(f"Error running seed_stations: {e}"))
            raise CommandError("Aborting all seeds due to seed_stations error.")

        # 4. Other Seeds (Add more modules here in the future)

        self.stdout.write(self.style.SUCCESS("\n--- All Seeds Completed ---"))